// 全局变量
let side = 4;
let base = 2;
let tiles = [];
let tileID = 0;
let currentScore = 0;
let bestScore = 0;
let isGameStarted = false;
let globalStep = 0; // 步数计数器
const SWIPE_THRESHOLD = 10;

// 数值格式化
function formatNumber(n) {
  const units = ["", "k", "m", "g", "t", "p", "e", "z", "y", "r", "q"];
  let unitIndex = 0;
  while (n >= 10240 && unitIndex < units.length - 1) {
    n = Math.floor(n / 1024);
    unitIndex++;
  }
  return n + units[unitIndex];
}

// 页面加载
window.addEventListener("DOMContentLoaded", () => {
  const bestScoreKey = "bestScore_" + side + "_" + base;
  if (localStorage.getItem(bestScoreKey)) {
    bestScore = parseInt(localStorage.getItem(bestScoreKey));
  }
  document.getElementById("bestScore").innerText = formatNumber(bestScore);

  document.getElementById("spanSide").innerText = side;
  document.getElementById("spanBase").innerText = base;

  createGrid(side);

  document.getElementById("btnSideMinus").addEventListener("click", () => changeSide(-1));
  document.getElementById("btnSidePlus").addEventListener("click", () => changeSide(+1));
  document.getElementById("btnBaseMinus").addEventListener("click", () => changeBase(-1));
  document.getElementById("btnBasePlus").addEventListener("click", () => changeBase(+1));

  document.getElementById("btnApply").addEventListener("click", applySettings);
  document.getElementById("btnRestart").addEventListener("click", restartGame);
  document.getElementById("btnDarkMode").addEventListener("click", toggleDarkMode);

  document.getElementById("btnExport").addEventListener("click", exportSave);
  document.getElementById("btnImport").addEventListener("click", () => {
    document.getElementById("fileInput").click();
  });
  document.getElementById("fileInput").addEventListener("change", importSave);

  const gridContainer = document.getElementById("gridContainer");
  gridContainer.addEventListener("touchmove", (e) => e.preventDefault(), { passive: false });

  if (localStorage.getItem("darkMode") === "true") {
    document.body.classList.add("dark-mode");
  }
});

// 创建背景格子
function createGrid(s) {
  const gridContainer = document.getElementById("gridContainer");
  gridContainer.innerHTML = "";
  gridContainer.style.gridTemplateRows = `repeat(${s}, 1fr)`;
  gridContainer.style.gridTemplateColumns = `repeat(${s}, 1fr)`;
  for (let i = 0; i < s; i++) {
    for (let j = 0; j < s; j++) {
      const cell = document.createElement("div");
      cell.classList.add("grid-cell");
      gridContainer.appendChild(cell);
    }
  }
}

// 改变棋盘边长
function changeSide(delta) {
  if (isGameStarted) return;
  let newVal = side + delta;
  if (newVal < 2) newVal = 2;
  if (newVal > 10) newVal = 10;
  side = newVal;
  document.getElementById("spanSide").innerText = side;
  const bestScoreKey = "bestScore_" + side + "_" + base;
  let stored = localStorage.getItem(bestScoreKey);
  document.getElementById("bestScore").innerText = stored ? formatNumber(parseInt(stored)) : "0";
  createGrid(side);
}

// 改变基数
function changeBase(delta) {
  if (isGameStarted) return;
  let newBase = base + delta;
  if (newBase < 2) newBase = 2;
  if (newBase > 10) newBase = 10;
  base = newBase;
  document.getElementById("spanBase").innerText = base;
  const bestScoreKey = "bestScore_" + side + "_" + base;
  let stored = localStorage.getItem(bestScoreKey);
  document.getElementById("bestScore").innerText = stored ? formatNumber(parseInt(stored)) : "0";
}

// 点击“开始游戏”
function applySettings() {
  if (isGameStarted) return;
  isGameStarted = true;
  document.getElementById("btnSideMinus").disabled = true;
  document.getElementById("btnSidePlus").disabled = true;
  document.getElementById("btnBaseMinus").disabled = true;
  document.getElementById("btnBasePlus").disabled = true;
  document.getElementById("btnApply").disabled = true;

  const bestScoreKey = "bestScore_" + side + "_" + base;
  bestScore = localStorage.getItem(bestScoreKey) ? parseInt(localStorage.getItem(bestScoreKey)) : 0;
  document.getElementById("bestScore").innerText = formatNumber(bestScore);
  setupGame();
}
